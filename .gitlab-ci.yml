stages:
  - testing
  - scanning
  - shipping
  - build-staging
  - build-prod
  - release-job

go-test:
  stage: testing
  image:
    name: golang:1.16
  script:
    - go test -v ./...
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

sonarqube-check:
  stage: scanning
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_TAG =~ /.*sonar$/'
  when: always

build-staging:
  stage: build-staging
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  script:
    - export VERSION=$(date +%Y%m%d-%H%M)
    - echo "CI_REGISTRY=$CI_REGISTRY, CI_COMMIT_TAG=$CI_COMMIT_TAG, CI_REGISTRY_USER=$CI_REGISTRY_USER, CI_REGISTRY_PASSWORD=$CI_REGISTRY_PASSWORD, CI_PROJECT_DIR=$CI_PROJECT_DIR"
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile docker/Dockerfile
      --destination $CI_REGISTRY/$CI_REGISTRY_IMAGE:dev-$VERSION-$CI_PIPELINE_ID
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_TAG =~ /.*hotfix-dev$/'
      when: always

build-prod:
  stage: build-prod
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: ['']
  script:
    - echo $CI_COMMIT_TAG
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - crane cp $CI_REGISTRY/$CI_REGISTRY_IMAGE:$OLD_TAG $CI_REGISTRY/$CI_REGISTRY_IMAGE_PROD:$NEW_TAG
  rules:
    - if: '$OLD_TAG == null || $NEW_TAG == null || $CI_COMMIT_BRANCH != "master"'
      when: never
      allow_failure: false
    - if: '$OLD_TAG != null && $NEW_TAG != null && $CI_COMMIT_BRANCH == "master"'

release_job:
  stage: release-job
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$OLD_TAG == null || $NEW_TAG == null || $CI_COMMIT_BRANCH != "master"'
      when: never
      allow_failure: false
    - if: '$OLD_TAG != null && $NEW_TAG != null && $CI_COMMIT_BRANCH == "master"'
  script:
    - echo "running release_job for $NEW_TAG"
    - release-cli create --name "Release $NEW_TAG" --tag-name "$NEW_TAG" --ref "$CI_COMMIT_SHA" --description "$EXTRA_DESCRIPTION"
